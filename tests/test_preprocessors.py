from unittest.mock import MagicMock
from bluesky import plans as bp
from bluesky.callbacks import CallbackBase
from ophyd.sim import det, motor, SynAxis

from haven import RunEngine, plans, baseline_decorator, baseline_wrapper


def test_baseline_wrapper(sim_registry):
    # Create a test device
    motor_baseline = SynAxis(name="baseline_motor", labels={"motors", "baseline"})
    sim_registry.register(motor_baseline)
    # Set up a callback to motor streams generated by runengine
    cb = CallbackBase()
    cb.start = MagicMock()
    cb.descriptor = MagicMock()
    cb.event = MagicMock()
    cb.stop = MagicMock()
    RE = RunEngine(connect_databroker=False)
    plan = bp.count([det], num=1)
    plan = baseline_wrapper(plan, devices="baseline")
    RE(plan, cb)
    # Check that the callback has the baseline stream inserted
    assert cb.start.called
    assert cb.descriptor.call_count > 1
    baseline_doc = cb.descriptor.call_args_list[0][0][0]
    primary_doc = cb.descriptor.call_args_list[1][0][0]
    assert baseline_doc["name"] == "baseline"
    assert "baseline_motor" in baseline_doc["data_keys"].keys()


def test_baseline_decorator(sim_registry):
    """Similar to baseline wrapper test, but used as a decorator."""
    # Create the decorated function before anything else
    func = baseline_decorator(devices="motors")(bp.count)
    # Create a test device
    motor_baseline = SynAxis(name="baseline_motor", labels={"motors"})
    sim_registry.register(motor_baseline)
    # Set up a callback to motor streams generated by runengine
    cb = CallbackBase()
    cb.start = MagicMock()
    cb.descriptor = MagicMock()
    cb.event = MagicMock()
    cb.stop = MagicMock()
    RE = RunEngine(connect_databroker=False)
    plan = func([det], num=1)
    RE(plan, cb)
    # Check that the callback has the baseline stream inserted
    assert cb.start.called
    assert cb.descriptor.call_count > 1
    baseline_doc = cb.descriptor.call_args_list[0][0][0]
    primary_doc = cb.descriptor.call_args_list[1][0][0]
    assert baseline_doc["name"] == "baseline"
    assert "baseline_motor" in baseline_doc["data_keys"].keys()


def test_metadata():
    """Similar to baseline wrapper test, but used as a decorator."""
    # Set up a callback to motor streams generated by runengine
    cb = CallbackBase()
    cb.start = MagicMock()
    cb.descriptor = MagicMock()
    cb.event = MagicMock()
    cb.stop = MagicMock()
    RE = RunEngine(connect_databroker=False)
    plan = bp.count([det], num=1)
    RE(plan, cb)
    # Check that the callback has the correct metadata
    assert cb.start.called
    assert cb.start.call_count == 1
    start_doc = cb.start.call_args[0][0]
    # Check versions
    assert "versions" in start_doc.keys()
    versions = start_doc["versions"]
    assert "haven" in versions.keys()
    assert versions["haven"] == "0.1.0"
    assert "bluesky" in versions.keys()
    # Check metadata keys
    expected_keys = [
        "uid",
        "time",
        "EPICS_HOST_ARCH",
        "beamline_id",
        "facility_id",
        "xray_source",
        "epics_libca",
        "EPICS_CA_MAX_ARRAY_BYTES",
        "login_id",
        "pid",
        "scan_id",
        "proposal_id",
        "plan_type",
        "plan_name",
        "detectors",
        "hints",
        "parameters",
        "purpose",
        "bss_aps_cycle",
        "bss_beamline_name",
        "esaf_id",
        "esaf_title",
        "mail_in_flag",
        "principal_user",
        "proposal_title",
        "proprietary_flag",
        "sample_name",
    ]
    missing_keys = set(expected_keys) - set(start_doc.keys())
    assert not missing_keys
    # Check metadata values
    expected_data = {
        "EPICS_HOST_ARCH": "",
        "beamline_id": "SPC Beamline (sector unknown)",
        "facility_id": "Advanced Photon Source",
        "xray_source": "insertion device",
        "epics_libca": "",
        "EPICS_CA_MAX_ARRAY_BYTES": "",
        "login_id": "",
        "pid": "",
        "scan_id": 1,
        "proposal_id": "",
        "plan_type": "generator",
        "plan_name": "count",
        "parameters": "",
        "purpose": "",
        "esaf_id": "",
        "esaf_title": "",
        "mail_in_flag": "",
        "principal_user": "",
        "proposal_title": "",
        "proprietary_flag": "",
        "sample_name": "",
        "bss_aps_cycle": "2023-2",
        "bss_beamline_name": "25ID-C",
    }
    for key, val in expected_data.items():
        assert start_doc[key] == val, f"{key}: {start_doc[key]}"
    # missing_keys = set(expected_keys) - set(start_doc.keys())
    # assert not missing_keys

    # for key in expected_keys:
    #     assert key in start_doc.keys()


# uid: 600852ca-3776-4e7a-ba29-f11786371e55
# time: 1667935604.6147602
# EPICS_HOST_ARCH: linux-x86_64
# beamline_id: APS 9-ID-C USAXS
# epics_libca: >-
#   /home/beams11/USAXS/micromamba/envs/bluesky_2022_3/lib/python3.10/site-packages/epics/clibs/linux64/libca.so
# EPICS_CA_MAX_ARRAY_BYTES: '1280000'
# login_id: usaxs@usaxscontrol.xray.aps.anl.gov
# pid: 1639175
# scan_id: 92
# proposal_id: ''
# versions:
#   apstools: 1.6.8
#   area_detector_handlers: 0.0.10
#   bluesky: 1.10.0
#   databroker: 1.2.5
#   epics_ca: 3.5.0
#   epics: 3.5.0
#   h5py: 3.7.0
#   matplotlib: 3.6.1
#   numpy: 1.23.3
#   ophyd: 1.7.0
#   pymongo: 4.2.0
#   pyRestTable: 2020.0.6
#   spec2nexus: 2021.2.4
# plan_type: generator
# plan_name: WAXS
# detectors:
#   - waxs_det
# num_points: 1
# num_intervals: 0
# plan_args:
#   detectors:
#     - >-
#       MyPilatusDetector(prefix='usaxs_pilatus2:', name='waxs_det',
#       read_attrs=['hdf1'], configuration_attrs=['cam', 'cam.acquire_period',
#       'cam.acquire_time', 'cam.image_mode', 'cam.manufacturer', 'cam.model',
#       'cam.num_exposures', 'cam.num_images', 'cam.trigger_mode', 'hdf1'])
#   num: 1
# hints:
#   dimensions:
#     - - - time
#       - primary
# full_filename: /share1/USAXS_data/2022-11/usaxs.mac
# filename: usaxs.mac
# line_number: 38
# action: waxsExp
# parameters:
#   - '40'
#   - '120'
#   - '3.77'
#   - Frye_VAC_Perp
# iso8601: '2022-11-08 13:26:41.101412'
# purpose: tuner
# datetime: '2022-11-08 12:48:48.735664'
# sx: 40
# sy: 120
# thickness: 3.77
# title: Frye_VAC_Perp
# bss_aps_cycle: ''
# bss_beamline_name: ''
# esaf_id: ''
# esaf_title: ''
# mail_in_flag: 'OFF'
# principal_user: no users listed
# proposal_title: ''
# proprietary_flag: 'OFF'
# sample_thickness_mm: 3.77
# hdf5_path: /share1/USAXS_data/2022-11/11_08_Frye/11_08_Frye_waxs
# hdf5_file: Frye_VAC_Perp_0009.hdf
# sample_image_name: /share1/USAXS_data/2022-11/11_08_Frye/11_08_Frye_waxs/Frye_VAC_Perp_0009.jpg
# method: areaDetectorAcquire
# area_detector_name: waxs_det
